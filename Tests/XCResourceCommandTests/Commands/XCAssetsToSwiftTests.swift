import XCTest
import TestUtil
import SampleData
@testable import XCResourceCommand

private enum Seed {
    static let publicColorKey = """
    // This file was generated by xcresource
    // Do Not Edit Directly!

    public struct ColorKey: ExpressibleByStringLiteral, Hashable {
        public var rawValue: String
        
        public init(_ rawValue: String) {
            self.rawValue = rawValue
        }
        
        public init(stringLiteral value: String) {
            self.rawValue = value
        }
    }

    // MARK: - Media.xcassets

    public extension ColorKey {
        static let accentColor: ColorKey = "AccentColor"
        
        // MARK: Color
        static let battleshipGrey8: ColorKey = "battleshipGrey8"
        static let battleshipGrey12: ColorKey = "battleshipGrey12"
        static let black5: ColorKey = "black5"
        static let blueBlue: ColorKey = "blueBlue"
        static let blush: ColorKey = "blush"
        static let brownGrey: ColorKey = "brownGrey"
        static let white30: ColorKey = "white30"
        static let wisteria: ColorKey = "wisteria"
    }
    
    """
}

final class XCAssetsToSwiftTests: XCTestCase {
    func test_runAsRoot() throws {
        // Given
        let fm = FileManager.default
        
        let swiftFileURL = fm.temporaryDirectory.appendingPathComponent(UUID().uuidString)
        
        defer {
            try? fm.removeItem(at: swiftFileURL)
        }
        
        // When
        try XCAssetsToSwift.runAsRoot(arguments: [
            "--xcassets-path", SampleData.assetURL().path,
            "--asset-type", "colorset",
            "--swift-path", swiftFileURL.path,
            "--key-type-name", "ColorKey",
        ])
        
        // Then
        XCTAssertEqual(
            try String(contentsOf: swiftFileURL),
            try String(contentsOf: SampleData.sourceCodeURL("ColorKey.swift"))
        )
    }
    
    func test_runAsRoot_publicAccessLevel() throws {
        // Given
        let fm = FileManager.default
        
        let swiftFileURL = fm.temporaryDirectory.appendingPathComponent(UUID().uuidString)
        
        defer {
            try? fm.removeItem(at: swiftFileURL)
        }
        
        // When
        try XCAssetsToSwift.runAsRoot(arguments: [
            "--xcassets-path", SampleData.assetURL().path,
            "--asset-type", "colorset",
            "--swift-path", swiftFileURL.path,
            "--key-type-name", "ColorKey",
            "--access-level", "public",
        ])
        
        // Then
        XCTAssertEqual(try String(contentsOf: swiftFileURL), Seed.publicColorKey)
    }
}
