import Foundation
import ArgumentParser
import LocStringGen
import XCResourceUtil

private let headerComment = """
// This file was generated by \(ProcessInfo.processInfo.processName)
// Do Not Edit Directly!
"""

struct KeyToForm: ParsableCommand {
    static let configuration: CommandConfiguration = .init(
        commandName: "key2form",
        abstract: "StringKey를 StringForm으로 변환",
        discussion: """
            enum 타입을 담고 있는 소스 코드에서 case와 주석을 추출해 StringForm 파일을 생성한다.
            StringForm은 String.init(format: String, _ arguments: CVarArg...)에 사용할 수 있다.
            """)
    
    // MARK: - Arguments
    
    @Option(name: .customLong("key-path"))
    var keyFilePath: String
    
    @Option(name: .customLong("form-path"))
    var formFilePath: String
    
    @Option var formTypeName: String
    
    @Flag var excludeTypeDeclation: Bool = false
    
    @Option(name: .customLong("issue-reporter"),
            help: ArgumentHelp(valueName: IssueReporterType.joinedArgumentName))
    var issueReporterType: IssueReporterType = .none
    
    // MARK: - Run
    
    mutating func run() throws {
        let codes = try generateCodes()
        
        try writeCodes(codes)
    }
    
    private func generateCodes() throws -> StringFormGenerator.Result {
        let request = StringFormGenerator.Request(
            sourceCodeURL: URL(fileURLWithExpandingTildeInPath: keyFilePath),
            formTypeName: formTypeName)
        
        let generator = StringFormGenerator()
        generator.issueReporterType = issueReporterType
        
        return try generator.generate(for: request)
    }
    
    private func writeCodes(_ codes: StringFormGenerator.Result) throws {
        let tempFileURL = FileManager.default.makeTemporaryItemURL()
        var stream = try TextFileOutputStream(forWritingTo: tempFileURL)
        
        print(headerComment, terminator: "\n\n", to: &stream)
        
        if !excludeTypeDeclation {
            print(codes.typeDeclaration, terminator: "\n\n", to: &stream)
        }
        
        print(codes.methodDeclarations, to: &stream)
        
        try stream.close()
        try FileManager.default.compareAndReplaceItem(at: formFilePath, withItemAt: tempFileURL)
    }
}
