import Foundation
import ArgumentParser
import FileResourceGen
import XCResourceUtil

private let headerComment = """
// This file was generated by xcresource.
// Do Not Edit Directly!
"""

struct FilesToSwift: ParsableCommand {
    static let configuration: CommandConfiguration = .init(
        commandName: "files2swift",
        abstract: "Generate Swift code for accessing files.",
        discussion: """
            This command generates Swift code to access files in a type-safe manner. \
            It scans the specified directory for files matching the given pattern \
            and generates code to access these files.
            """)
    
    // MARK: - Default values
    
    enum Default {
        static let preservesRelativePath: Bool = true
        static let bundle: String = "Bundle.main"
        static let excludesTypeDeclaration: Bool = false
    }
    
    // MARK: - Arguments
    
    @Option var resourcesPath: String
    
    @Option var filePattern: String
    
    @Option var swiftFilePath: String
    
    @Option var resourceTypeName: String
    
    @Flag(name: .customLong("preserve-relative-path"), inversion: .prefixedNo)
    var preservesRelativePath: Bool = Default.preservesRelativePath
    
    @Option var relativePathPrefix: String?
    
    @Option var bundle: String = Default.bundle
    
    @Option(help: ArgumentHelp(valueName: AccessLevel.joinedAllValuesString))
    var accessLevel: AccessLevel?
    
    @Flag(name: .customLong("exclude-type-declaration"))
    var excludesTypeDeclaration: Bool = Default.excludesTypeDeclaration
    
    // MARK: - Run
    
    mutating func run() throws {
        let codes = try generateCodes()
        
        try writeCodes(codes)
    }
    
    private func generateCodes() throws -> FileResourceGenerator.Result {
        let request = FileResourceGenerator.Request(
            resourcesURL: URL(filePath: resourcesPath, expandingTilde: true),
            filePattern: filePattern,
            resourceTypeName: resourceTypeName,
            preservesRelativePath: preservesRelativePath,
            relativePathPrefix: relativePathPrefix,
            bundle: bundle,
            accessLevel: accessLevel?.rawValue)
        
        return try FileResourceGenerator().generate(for: request)
    }
    
    private func writeCodes(_ codes: FileResourceGenerator.Result) throws {
        let tempFileURL = FileManager.default.makeTemporaryItemURL()
        var stream = try TextFileOutputStream(forWritingTo: tempFileURL)
        
        print(headerComment, terminator: "\n\n", to: &stream)
        
        print("import Foundation", terminator: "\n\n", to: &stream)
        
        if !excludesTypeDeclaration {
            print(codes.typeDeclaration, terminator: "\n\n", to: &stream)
        }
        
        print(codes.valueDeclarations, to: &stream)
        
        try stream.close()
        try FileManager.default.compareAndReplaceItem(at: swiftFilePath, withItemAt: tempFileURL)
    }
}
