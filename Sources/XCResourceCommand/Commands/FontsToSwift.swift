import Foundation
import ArgumentParser
import FontKeyGen
import XCResourceUtil

private let headerComment = """
// This file was generated by xcresource
// Do Not Edit Directly!
"""

struct FontsToSwift: ParsableCommand {
    static let configuration: CommandConfiguration = .init(
        commandName: "fonts2swift",
        abstract: "Font 키 파일 생성",
        discussion: """
            디렉토리의 폰트 파일을 추출해 키 파일을 생성한다.
            추출한 키 파일은 앱에서 폰트 로딩 시 사용할 수 있다.
            """)
    
    // MARK: - Default values
    
    enum Default {
        static let bundle: String = "Bundle.main"
        static let generatesLatinKey: Bool = false
        static let stripsCombiningMarksFromKey: Bool = false
        static let preservesRelativePath: Bool = true
        static let excludesTypeDeclation: Bool = false
    }
    
    // MARK: - Arguments
    
    @Option var resourcesPath: String
    
    @Option var swiftPath: String
    
    @Option var keyTypeName: String
    
    @Option var keyListName: String?
    
    @Flag(name: .customLong("generate-latin-key"))
    var generatesLatinKey: Bool = Default.generatesLatinKey
    
    @Flag(name: .customLong("strip-combining-marks-from-key"))
    var stripsCombiningMarksFromKey: Bool = Default.stripsCombiningMarksFromKey
    
    @Flag(name: .customLong("preserve-relative-path"), inversion: .prefixedNo)
    var preservesRelativePath: Bool = Default.preservesRelativePath
    
    @Option var relativePathPrefix: String?
    
    @Option var bundle: String = Default.bundle
    
    @Option(help: ArgumentHelp(valueName: AccessLevel.joinedAllValuesString))
    var accessLevel: AccessLevel?
    
    @Flag(name: .customLong("exclude-type-declation"))
    var excludesTypeDeclation: Bool = Default.excludesTypeDeclation
    
    // MARK: - Run
    
    mutating func run() throws {
        let codes = try generateCodes()
        
        try writeCodes(codes)
    }
    
    private func generateCodes() throws -> FontKeyGenerator.Result {
        let request = FontKeyGenerator.Request(
            resourcesURL: URL(fileURLWithExpandingTildeInPath: resourcesPath),
            keyTypeName: keyTypeName,
            keyListName: keyListName,
            generatesLatinKey: generatesLatinKey,
            stripsCombiningMarksFromKey: stripsCombiningMarksFromKey,
            preservesRelativePath: preservesRelativePath,
            relativePathPrefix: relativePathPrefix,
            bundle: bundle,
            accessLevel: accessLevel?.rawValue)
        
        return try FontKeyGenerator().generate(for: request)
    }
    
    private func writeCodes(_ codes: FontKeyGenerator.Result) throws {
        let tempFileURL = FileManager.default.makeTemporaryItemURL()
        var stream = try TextFileOutputStream(forWritingTo: tempFileURL)
        
        print(headerComment, terminator: "\n\n", to: &stream)
        
        print("import Foundation", terminator: "\n\n", to: &stream)
        
        if !excludesTypeDeclation {
            print(codes.typeDeclaration, terminator: "\n\n", to: &stream)
        }
        
        if let keyListDeclaration = codes.keyListDeclaration {
            print(keyListDeclaration, terminator: "\n\n", to: &stream)
        }
        
        print(codes.keyDeclarations, to: &stream)
        
        try stream.close()
        try FileManager.default.compareAndReplaceItem(at: swiftPath, withItemAt: tempFileURL)
    }
}
