import Foundation
import ArgumentParser
import AssetResourceGen
import XCResourceUtil

private let headerComment = """
// This file was generated by xcresource.
// Do Not Edit Directly!
"""

private let catalogDocumentURLString = """
https://developer.apple.com/library/archive/documentation/Xcode/Reference/\
xcode_ref-Asset_Catalog_Format/AssetTypes.html
"""

struct XCAssetsToSwift: ParsableCommand {
    static let configuration: CommandConfiguration = .init(
        commandName: "xcassets2swift",
        abstract: "Generate Swift code for accessing assets.",
        discussion: """
            This command generates Swift code to access assets in a type-safe manner. \
            It scans the specified asset catalog for assets and \
            generates code to access these assets.
            """)
    
    // MARK: - Default values
    
    enum Default {
        static let assetTypes: [AssetType] = []
        static let bundle: String = "Bundle.main"
        static let excludesTypeDeclaration: Bool = false
    }
    
    // MARK: - Arguments
    
    @Option(name: .customLong("xcassets-path"))
    var assetCatalogPaths: [String]
    
    @Option(name: .customLong("asset-type"),
            parsing: .upToNextOption,
            help: ArgumentHelp(
                "Specify the asset types to generate.",
                discussion: "If not specified, all asset types will be generated. For more "
                    + "information about possible types, see \(catalogDocumentURLString)",
                valueName: AssetType.joinedAllValuesString))
    var assetTypes: [AssetType] = Default.assetTypes
    
    @Option var swiftFilePath: String
    
    @Option var resourceTypeName: String
    
    @Option var bundle: String = Default.bundle
    
    @Option(help: ArgumentHelp(valueName: AccessLevel.joinedAllValuesString))
    var accessLevel: AccessLevel?
    
    @Flag(name: .customLong("exclude-type-declaration"))
    var excludesTypeDeclaration: Bool = Default.excludesTypeDeclaration
    
    // MARK: - Run
    
    mutating func run() throws {
        let codes = try generateCodes()
        
        try writeCodes(codes)
    }
    
    private func generateCodes() throws -> AssetResourceGenerator.Result {
        let request = AssetResourceGenerator.Request(
            assetCatalogURLs: assetCatalogPaths.map({ URL(filePath: $0, expandingTilde: true) }),
            assetTypes: Set(assetTypes.isEmpty ? AssetType.allCases : assetTypes),
            resourceTypeName: resourceTypeName,
            bundle: bundle,
            accessLevel: accessLevel?.rawValue)
        
        return try AssetResourceGenerator().generate(for: request)
    }
    
    private func writeCodes(_ codes: AssetResourceGenerator.Result) throws {
        let tempFileURL = FileManager.default.makeTemporaryItemURL()
        var stream = try TextFileOutputStream(forWritingTo: tempFileURL)
        
        print(headerComment, terminator: "\n\n", to: &stream)
        
        print("import Foundation", terminator: "\n\n", to: &stream)
        
        if !excludesTypeDeclaration {
            print(codes.typeDeclaration, terminator: "\n\n", to: &stream)
        }
        
        print(codes.valueDeclarations, to: &stream)
        
        try stream.close()
        try FileManager.default.compareAndReplaceItem(at: swiftFilePath, withItemAt: tempFileURL)
    }
}
